#!/usr/bin/env bash
# ==========================================================
# Generic Tilix session logger (robust variant)
# - ensures log dir exists and is writable
# - attempts to create the logfile before invoking 'script'
# - falls back to /tmp if home is not writable
# - prints diagnostics when it cannot create the log
# ==========================================================

LOGDIR="${HOME:-/root}/tilix-logs"   # fallback if HOME unset
mkdir -p "$LOGDIR" 2>/dev/null || true

HOST=$(hostname -s 2>/dev/null || echo "host")
USER_NOW=$(whoami 2>/dev/null || echo "user")
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
TTYNAME=$(tty 2>/dev/null | sed 's#/dev/##' || echo "no-tty")

LOGFILE="$LOGDIR/${HOST}_${USER_NOW}_${TIMESTAMP}_${TTYNAME}.log"

# Prevent recursion if already under this wrapper
if [ -z "$TILIX_LOGGER_ACTIVE" ]; then
  export TILIX_LOGGER_ACTIVE=1

  # Try to ensure the log file can be created (and is writable)
  if ! touch "$LOGFILE" 2>/dev/null; then
    echo "[tilix-logger] Warning: cannot create $LOGFILE (permission or path issue)." >&2
    # try fallback directory
    FALLBACK_DIR="/tmp/tilix-logs"
    mkdir -p "$FALLBACK_DIR" 2>/dev/null || true
    LOGFILE="$FALLBACK_DIR/${TIMESTAMP}_${TTYNAME}.log"
    if ! touch "$LOGFILE" 2>/dev/null; then
      echo "[tilix-logger] ERROR: failed to create logfile in fallback $FALLBACK_DIR. Exiting." >&2
      exit 1
    else
      echo "[tilix-logger] Using fallback logfile: $LOGFILE" >&2
    fi
  fi

  # Secure the log file permissions
  chmod 600 "$LOGFILE" 2>/dev/null || true

  echo "[tilix-logger] Recording session to: $LOGFILE" >&2
  # Launch user's login shell inside 'script'
  exec script -q -f -c "$SHELL --login" "$LOGFILE"
else
  exec "$SHELL" --login
fi